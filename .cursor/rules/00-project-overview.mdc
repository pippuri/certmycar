---
alwaysApply: true
---

# EV Battery Certification Platform - Implementation Plan & Architecture

## Executive Summary

A NextJS-based platform that provides instant Tesla battery health assessments with minimal user friction, monetized through verified PDF certificates.

## Project Status

### ✅ Prerequisites Verified (2025-07-21)

- **Node.js v22.13.1** ✅ (Requirement: 18+)
- **npm v11.2.0** ✅
- **Git v2.49.0** ✅
- **GitHub CLI v2.69.0** ✅
- **Netlify CLI v22.3.0** ✅ (Installed)
- **Supabase CLI v2.31.8** ✅ (Installed)
- **Docker v28.0.4** ✅ (For Supabase local development)

### 🚀 Repository Setup Complete

- **GitHub Repository**: [pippuri/certmycar](https://github.com/pippuri/certmycar) ✅
- **CI/CD Ready**: GitHub Actions integration ✅
- **Issue Tracking**: 9 detailed issues created ✅
- **Documentation**: README and architecture docs ✅

### 📋 Development Phases

- **Phase 1**: Project Setup & Infrastructure (Issues #1-3)
- **Phase 2**: Monetization & Features (Issues #4-6)
- **Phase 3**: Optimization & Launch (Issues #7-9)

### 🎯 Next Action Items

1. **Issue #1**: Initialize NextJS project and Netlify deployment
2. **Issue #2**: Tesla API integration and battery calculation
3. **Issue #3**: Landing page with v0 components

---

## User Experience Strategy: The "Hook"

### Primary Goal: Get Users to Battery Result with Zero Friction

**The Hook Flow**:

1. **Landing Page**: "Check Your Tesla Battery Health in 30 Seconds"
2. **One Click**: "Check My Tesla" button
3. **Tesla Login**: Standard Tesla authentication (no account creation yet)
4. **Instant Result**: "Battery Health: Good (8% degradation)"
5. **Value Reveal**: "Get Official Certificate - $9.99"
6. **Account Creation**: Only now, to purchase certificate

### Why This Works

- **Immediate value** before any commitment
- **Proof of concept** builds trust
- **Low barrier** to try the service
- **Clear value proposition** for paid upgrade

## Technical Architecture

### Core Stack - Modern JAMstack

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   NextJS 14     │    │    Netlify      │    │    Supabase     │
│   (App Router)  │◄──►│   Functions     │◄──►│   (Database     │
│   + v0 UI       │    │   + Edge        │    │   + Auth + Storage) │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Multi-lang    │    │   GitHub        │    │     Stripe      │
│   (next-intl)   │    │   CI/CD         │    │   Payments      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

### Why This Stack is Superior

**Netlify Advantages**:

- ✅ **Automatic CI/CD** from GitHub (zero config)
- ✅ **Deploy previews** for every PR
- ✅ **Edge functions** for Tesla API calls
- ✅ **Built-in CDN** globally distributed
- ✅ **Branch deployments** for testing

**Supabase Advantages**:

- ✅ **Managed PostgreSQL** with real-time features
- ✅ **Built-in authentication** (social login, magic links)
- ✅ **File storage** for PDF certificates
- ✅ **Row Level Security** for data protection
- ✅ **Auto-generated APIs** (REST + GraphQL)

### Database Schema (Supabase)

```sql
-- Managed by Supabase Auth
auth.users (
  id, email, created_at, raw_user_meta_data
)

-- Extended user profiles
public.profiles (
  id uuid references auth.users primary key,
  stripe_customer_id text,
  created_at timestamp default now()
)

-- Vehicle specifications lookup (static data)
public.vehicle_specs (
  id serial primary key,
  model text not null,
  year integer not null,
  battery_type text not null,
  original_capacity_kwh decimal not null,
  created_at timestamp default now()
)

-- Battery assessments (anonymous + logged in)
public.assessments (
  id uuid primary key default gen_random_uuid(),
  tesla_vin text not null,
  battery_health text not null, -- 'Good', 'Fair', 'Poor'
  degradation_pct decimal not null,
  assessment_date timestamp default now(),
  user_id uuid references auth.users null, -- null for anonymous
  user_agent text,

  -- RLS policies applied
  constraint valid_health check (battery_health in ('Good', 'Fair', 'Poor'))
)

-- Certificates (paid only)
public.certificates (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references auth.users not null,
  assessment_id uuid references assessments not null,
  stripe_payment_intent text not null,
  verification_token text unique not null,
  pdf_path text, -- Supabase Storage path
  created_at timestamp default now()
)

-- Row Level Security (RLS) policies
alter table profiles enable row level security;
alter table assessments enable row level security;
alter table certificates enable row level security;

-- Users can only see their own data
create policy "Users can view own profile" on profiles for select using (auth.uid() = id);
create policy "Users can view own certificates" on certificates for select using (auth.uid() = user_id);
```

## User Journey Flows

### Flow 1: Owner Getting Certificate

```mermaid
graph TD
    A[Landing Page] --> B[Check My Tesla]
    B --> C[Tesla OAuth]
    C --> D[Battery Assessment]
    D --> E{Satisfied?}
    E -->|Yes| F[Get Certificate - $9.99]
    E -->|No| G[Exit]
    F --> H[Create Account]
    H --> I[Payment]
    I --> J[PDF Certificate + QR]
```

### Flow 2: Buyer Verification

```mermaid
graph TD
    A[Scan QR Code] --> B[Verification Page]
    B --> C[Display Certificate]
    C --> D[Email PDF to Me]
    D --> E[Email Capture]
    E --> F[PDF Sent + Newsletter Signup]
```

## Component Architecture (v0 Compatible)

### Landing Page Components

```typescript
// Landing page with hero section
<Hero
  title="Check Your Tesla Battery Health"
  subtitle="Instant assessment in 30 seconds"
  cta="Check My Tesla"
/>

<Features
  features={[
    "Instant Results",
    "Official Certificates",
    "Buyer Verification"
  ]}
/>

<HowItWorks
  steps={[
    "Connect Tesla",
    "Get Assessment",
    "Download Certificate"
  ]}
/>
```

### Assessment Flow Components

```typescript
<TeslaConnect
  onSuccess={handleTeslaAuth}
  loading={isConnecting}
/>

<BatteryAssessment
  result={batteryHealth}
  vehicle={vehicleInfo}
  showUpgrade={true}
/>

<CertificateUpgrade
  price="$9.99"
  benefits={["PDF Certificate", "QR Verification", "Lifetime Access"]}
/>
```

## Implementation Phases

### Phase 1: Core MVP (Week 1-2)

```typescript
// Project structure optimized for Netlify + Supabase
├── netlify/
│   ├── functions/
│   │   ├── tesla-auth.ts         // Tesla API integration
│   │   ├── generate-certificate.ts // PDF generation
│   │   ├── stripe-webhook.ts     // Payment processing
│   │   └── verify-certificate.ts // QR verification
│   └── edge-functions/
│       └── tesla-proxy.ts        // Tesla API rate limiting
├── src/
│   ├── app/
│   │   ├── [locale]/
│   │   │   ├── page.tsx          // Landing page
│   │   │   ├── check/page.tsx    // Tesla auth flow
│   │   │   ├── result/page.tsx   // Battery assessment
│   │   │   ├── verify/[id]/page.tsx // QR verification
│   │   │   └── dashboard/page.tsx   // User certificates
│   │   └── globals.css
│   ├── components/
│   │   ├── ui/                   // v0 components
│   │   ├── tesla-connect.tsx
│   │   ├── battery-assessment.tsx
│   │   ├── certificate-upgrade.tsx
│   │   └── auth/                 // Supabase auth components
│   ├── lib/
│   │   ├── supabase.ts          // Supabase client
│   │   ├── tesla-api.ts         // Tesla API helpers
│   │   ├── battery-calc.ts      // Battery health calculation
│   │   └── stripe.ts            // Stripe client
│   └── messages/                // i18n translations
│       ├── en.json
│       ├── es.json
│       └── de.json
├── supabase/
│   ├── migrations/              // Database schema
│   ├── seed.sql                 // Vehicle specs data
│   └── config.toml              // Supabase config
├── netlify.toml                 // Netlify configuration
└── package.json
```

### Netlify Configuration

```toml
# netlify.toml
[build]
  command = "npm run build"
  publish = ".next"

[build.environment]
  NODE_VERSION = "18"

[[plugins]]
  package = "@netlify/plugin-nextjs"

[functions]
  node_bundler = "esbuild"

[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"

# Redirect rules for SPA routing
[[redirects]]
  from = "/verify/*"
  to = "/verify/[id]"
  status = 200

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200
```

### Phase 2: Monetization (Week 3-4)

- Stripe integration
- PDF generation with QR codes
- User accounts (Supabase Auth)
- Email system (AWS SES)

### Phase 3: Optimization (Week 5-6)

- Analytics deep dive
- Performance optimization
- SEO implementation
- Multi-language content

## Key Technical Decisions

### Tesla API Integration (Netlify Functions)

```typescript
// netlify/functions/tesla-auth.ts
export const handler = async (event, context) => {
  if (event.httpMethod !== "POST") {
    return { statusCode: 405, body: "Method Not Allowed" };
  }

  const { authUrl } = JSON.parse(event.body);

  try {
    // Extract token from Tesla callback URL
    const token = extractTokenFromUrl(authUrl);

    // Get vehicle data via Tesla Owner API
    const vehicles = await getTeslaVehicles(token);
    const batteryData = await getBatteryData(token, vehicles[0].id);

    // Calculate health using simple SoC method
    const health = calculateBatteryHealth(batteryData, vehicles[0].vin);

    // Store assessment in Supabase (anonymous)
    const { data, error } = await supabase
      .from("assessments")
      .insert({
        tesla_vin: vehicles[0].vin,
        battery_health: health.status,
        degradation_pct: health.degradation,
        user_agent: event.headers["user-agent"],
      })
      .select()
      .single();

    return {
      statusCode: 200,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ assessment: data, vehicle: vehicles[0] }),
    };
  } catch (error) {
    console.error("Tesla auth error:", error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Failed to authenticate with Tesla" }),
    };
  }
};
```

### Certificate Generation (Netlify Functions + Supabase)

```typescript
// netlify/functions/generate-certificate.ts
import { createClient } from "@supabase/supabase-js";
import PDFDocument from "pdfkit";
import QRCode from "qrcode";

export const handler = async (event, context) => {
  if (event.httpMethod !== "POST") {
    return { statusCode: 405, body: "Method Not Allowed" };
  }

  const { assessmentId, stripePaymentIntent } = JSON.parse(event.body);

  // Verify payment with Stripe
  const payment = await stripe.paymentIntents.retrieve(stripePaymentIntent);
  if (payment.status !== "succeeded") {
    return { statusCode: 400, body: "Payment not completed" };
  }

  try {
    // Get user from Supabase Auth context
    const user = context.clientContext.user;
    if (!user) {
      return { statusCode: 401, body: "Unauthorized" };
    }

    // Generate unique verification token
    const verificationToken = generateUniqueToken();

    // Get assessment data from Supabase
    const { data: assessment } = await supabase
      .from("assessments")
      .select("*")
      .eq("id", assessmentId)
      .single();

    // Create QR code for verification
    const qrCodeDataUrl = await QRCode.toDataURL(
      `${process.env.NEXT_PUBLIC_SITE_URL}/verify/${verificationToken}`
    );

    // Generate PDF with assessment data + QR code
    const pdfBuffer = await generatePDF({
      assessment,
      qrCodeDataUrl,
      verificationToken,
    });

    // Upload to Supabase Storage
    const fileName = `${assessmentId}-${Date.now()}.pdf`;
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from("certificates")
      .upload(fileName, pdfBuffer, {
        contentType: "application/pdf",
        upsert: false,
      });

    if (uploadError) throw uploadError;

    // Save certificate record to database
    const { data: certificate, error: dbError } = await supabase
      .from("certificates")
      .insert({
        user_id: user.sub,
        assessment_id: assessmentId,
        stripe_payment_intent: stripePaymentIntent,
        verification_token: verificationToken,
        pdf_path: uploadData.path,
      })
      .select()
      .single();

    if (dbError) throw dbError;

    // Get public URL for download
    const { data: publicUrlData } = supabase.storage
      .from("certificates")
      .getPublicUrl(uploadData.path);

    return {
      statusCode: 200,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        certificate,
        downloadUrl: publicUrlData.publicUrl,
        verificationToken,
      }),
    };
  } catch (error) {
    console.error("Certificate generation error:", error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Failed to generate certificate" }),
    };
  }
};
```

### Multi-language Setup

```typescript
// next.config.js
module.exports = {
  i18n: {
    locales: ["en", "es", "de", "fr"],
    defaultLocale: "en",
  },
};

// Component usage
import { useTranslations } from "next-intl";

export function Hero() {
  const t = useTranslations("Hero");

  return (
    <div>
      <h1>{t("title")}</h1>
      <p>{t("subtitle")}</p>
    </div>
  );
}
```

## Monetization Strategy

### Pricing

- **Free**: Battery health check
- **$9.99**: Official PDF certificate with QR verification

### Value Proposition

- **For Owners**: Professional documentation for resale
- **For Buyers**: Verified battery health from trusted source
- **For Platform**: Recurring revenue from high-value transactions

### Payment Flow

```typescript
// Stripe integration
export async function createPaymentIntent(assessmentId: string) {
  const paymentIntent = await stripe.paymentIntents.create({
    amount: 999, // $9.99
    currency: "usd",
    metadata: { assessment_id: assessmentId },
  });

  return paymentIntent.client_secret;
}
```

## Deployment Architecture

### Netlify + Supabase Stack

**Netlify Services**:

- **Static Hosting**: NextJS app with automatic builds
- **Next Functions**: Tesla API proxy (TypeScript)
- **Functions**: PDF generation and Stripe webhooks
- **CDN**: Global distribution built-in
- **Domain Management**: Custom domain with SSL

**Supabase Services**:

- **Database**: PostgreSQL with real-time subscriptions
- **Auth**: User authentication with social providers
- **Storage**: PDF certificate file storage
- **Next Functions**: Database triggers (if needed)

### CI/CD Pipeline

```yaml
# .github/workflows/deploy.yml
name: Deploy to Netlify
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - run: npm ci
      - run: npm run build
      - run: npm run test

      # Netlify deploys automatically via GitHub integration
      # Environment variables managed in Netlify dashboard
```

### Environment Configuration

```bash
# Netlify Environment Variables
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJ...
SUPABASE_SERVICE_ROLE_KEY=eyJ...
STRIPE_PUBLISHABLE_KEY=pk_...
STRIPE_SECRET_KEY=sk_...
STRIPE_WEBHOOK_SECRET=whsec_...
NEXT_PUBLIC_SITE_URL=https://certmycar.com
```

## Analytics & Monitoring

### Google Analytics Events

```typescript
// Track key user actions
gtag("event", "tesla_connected", {
  event_category: "engagement",
  event_label: "tesla_auth_success",
});

gtag("event", "purchase", {
  event_category: "ecommerce",
  transaction_id: paymentIntent.id,
  value: 9.99,
  currency: "USD",
});
```

### Sentry Integration

```typescript
// Error monitoring
import * as Sentry from "@sentry/nextjs";

export default function handler(req, res) {
  try {
    // API logic
  } catch (error) {
    Sentry.captureException(error);
    res.status(500).json({ error: "Internal server error" });
  }
}
```

## Security Considerations

### Data Protection

- **No Tesla credentials stored** - use proxy pattern
- **Minimal data retention** - delete tokens after use
- **Encrypted certificate storage**
- **GDPR compliance** for EU users

### API Security

```typescript
// Rate limiting for Tesla API calls
import { Ratelimit } from "@upstash/ratelimit";

const ratelimit = new Ratelimit({
  redis,
  limiter: Ratelimit.slidingWindow(10, "1 m"),
});
```

## Launch Strategy

### Phase 1: Soft Launch

- Deploy MVP to staging
- Test with 10-20 Tesla owners
- Iterate based on feedback

### Phase 2: Public Launch

- SEO-optimized landing pages
- Social media campaign
- Tesla community outreach

### Phase 3: Scale

- Performance optimization
- Additional EV brands
- Enterprise partnerships

## Success Metrics

### Key Performance Indicators

- **Conversion Rate**: Landing page → Tesla check
- **Completion Rate**: Tesla check → result
- **Purchase Rate**: Result → paid certificate
- **Verification Rate**: QR scans by buyers

### Revenue Targets

- **Month 1**: $1,000 (100 certificates)
- **Month 3**: $5,000 (500 certificates)
- **Month 6**: $15,000 (1,500 certificates)

This architecture prioritizes user experience while building a sustainable business model around verified battery health certificates.

## Simple Implementation Example (Netlify + Supabase)

```typescript
// Frontend: Tesla connection with Supabase auth
"use client";
import { useSupabaseClient, useUser } from "@supabase/auth-helpers-react";

export default function TeslaConnect() {
  const supabase = useSupabaseClient();
  const user = useUser();

  const handleTeslaAuth = async (authUrl: string) => {
    // Call Netlify function
    const response = await fetch("/.netlify/functions/tesla-auth", {
      method: "POST",
      body: JSON.stringify({ authUrl }),
      headers: { "Content-Type": "application/json" },
    });

    const result = await response.json();

    // Display instant results
    return result.assessment; // { health: 'Good', degradation: 8 }
  };

  return (
    <div>
      <button onClick={() => handleTeslaAuth(teslaCallbackUrl)}>
        Check My Tesla Battery
      </button>
    </div>
  );
}
```

```typescript
// Backend: Complete flow in Netlify function
export const handler = async (event, context) => {
  // 1. Extract Tesla token & get vehicle data
  const token = extractTokenFromUrl(authUrl);
  const vehicles = await getTeslaVehicles(token);
  const batteryData = await getBatteryData(token, vehicles[0].id);

  // 2. Calculate health (same simple method)
  const currentSoC = batteryData.charge_state.battery_level;
  const availableEnergy = batteryData.charge_state.usable_battery_level;
  const totalCapacity = availableEnergy / (currentSoC / 100);

  // 3. Lookup original capacity from Supabase
  const { data: specs } = await supabase
    .from("vehicle_specs")
    .select("original_capacity_kwh")
    .eq("model", vehicles[0].display_name)
    .single();

  // 4. Calculate degradation
  const degradation = (1 - totalCapacity / specs.original_capacity_kwh) * 100;
  const health = degradation < 10 ? "Good" : degradation < 15 ? "Fair" : "Poor";

  // 5. Store in Supabase (anonymous)
  const { data: assessment } = await supabase
    .from("assessments")
    .insert({
      tesla_vin: vehicles[0].vin,
      battery_health: health,
      degradation_pct: Math.round(degradation),
    })
    .select()
    .single();

  return {
    statusCode: 200,
    body: JSON.stringify({ assessment, vehicle: vehicles[0] }),
  };
};
```

**Result**:

- **User Experience**: "Battery Health: Good (8% degradation)" in 30 seconds
- **Technical**: Auto-scaling, managed database, built-in auth, global CDN
- **Development**: Simpler than server actions, better separation of concerns

## Why This Stack is Superior for This Use Case

✅ **Netlify Benefits**:

- **Zero-config CI/CD** from GitHub
- **Deploy previews** for every PR (perfect for testing)
- **Edge functions** handle Tesla API rate limiting closer to users
- **Built-in analytics** and performance monitoring
- **Form handling** for email capture (no backend needed)

✅ **Supabase Benefits**:

- **Real-time subscriptions** if we add live battery monitoring
- **Row Level Security** protects user data automatically
- **Auto-generated APIs** reduce backend code by 70%
- **Built-in file storage** for PDFs with CDN
- **Magic link auth** for better conversion than passwords

✅ **Combined Power**:

- **Faster development** - Focus on features, not infrastructure
- **Better scaling** - Both services auto-scale to zero and up
- **Lower costs** - Pay only for usage, generous free tiers
- **Better DX** - Hot reloading, deploy previews, managed databases
- **Global performance** - Edge functions + CDN + global DB

This stack turns a complex infrastructure problem into a simple development experience while providing enterprise-grade reliability and performance.

## Prerequisites Installation Guide

### Core Requirements

```bash
# Check Node.js version (need 18+)
node --version

# Check npm version
npm --version

# Check Git version
git --version
```

### Development Tools

```bash
# Install GitHub CLI (if not installed)
brew install gh

# Install Netlify CLI
npm install -g netlify-cli

# Install Supabase CLI
brew install supabase/tap/supabase

# Verify installations
netlify --version
supabase --version
```

### Optional Tools

```bash
# Docker (for Supabase local development)
# Install Docker Desktop from https://docker.com

# Verify Docker
docker --version
```

### Environment Setup

```bash
# Clone repository
git clone https://github.com/pippuri/certmycar.git
cd certmycar

# Install dependencies (when package.json exists)
npm install

# Set up environment variables
cp .env.example .env.local
# Edit .env.local with your API keys

# Start development
npm run dev
```

### Quick Start Commands

```bash
# Netlify development
netlify dev

# Supabase local development
supabase start

# View project status
gh issue list
```
